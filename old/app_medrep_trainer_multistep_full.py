
import streamlit as st
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
@st.cache_data
def load_scenarios(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)["scenarios"]

# –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
def find_scenario(scenarios, objection, style):
    for item in scenarios:
        if item["objection"] == objection and item["style"] == style:
            return item
    return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö 20 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å 3 —à–∞–≥–∞–º–∏
scenarios = load_scenarios("scenarios_medrep_multistep_full_20.json")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üß† –ú—É–ª—å—Ç–∏—à–∞–≥–æ–≤—ã–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä –¥–ª—è –º–µ–¥–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π")

# –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
objection_options = sorted(list(set(s["objection"] for s in scenarios)))
style_options = ["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π", "—Å–∫–µ–ø—Ç–∏–∫", "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π"]

selected_objection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ", objection_options)
selected_style = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≤—Ä–∞—á–∞", style_options)

# –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
scenario = find_scenario(scenarios, selected_objection, selected_style)

if scenario:
    if "step" not in st.session_state or st.session_state.get("last_selection") != (selected_objection, selected_style):
        st.session_state.step = 0
        st.session_state.last_selection = (selected_objection, selected_style)
        st.session_state.feedback_shown = False

    steps = scenario["steps"]
    current_step = st.session_state.step

    if current_step < len(steps):
        step_data = steps[current_step]
        st.subheader(f"üë®‚Äç‚öïÔ∏è –†–µ–ø–ª–∏–∫–∞ –≤—Ä–∞—á–∞ (—à–∞–≥ {current_step + 1}/{len(steps)}):")
        st.markdown(f"> {step_data['doctor']}")

        st.subheader("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
        for i, answer in enumerate(step_data["answers"]):
            if st.button(f"{i + 1}. {answer['text']}", key=f"step_{current_step}_ans_{i}"):
                st.session_state.selected_answer = answer
                st.session_state.feedback_shown = True

        if st.session_state.get("feedback_shown", False):
            answer = st.session_state.selected_answer
            st.markdown(f"**–¢–∏–ø –æ—Ç–≤–µ—Ç–∞:** {answer['type']}")
            st.info(answer["feedback"])
            if st.button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥"):
                st.session_state.step += 1
                st.session_state.feedback_shown = False
                del st.session_state.selected_answer
    else:
        st.success("üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ 3 —à–∞–≥–æ–≤!")
        if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            st.session_state.step = 0
            st.session_state.feedback_shown = False
            if "selected_answer" in st.session_state:
                del st.session_state.selected_answer
else:
    st.warning("–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
