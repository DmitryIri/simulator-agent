
import streamlit as st
import json
from datetime import datetime

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ===
with open("scenarios_structured.json", "r", encoding="utf-8") as f:
    scenarios = json.load(f)

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
st.set_page_config(page_title="MP-Agent: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", page_icon="üß©")
st.title("üß© –¢—Ä–µ–Ω–∞–∂—ë—Ä: –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–ø–æ —ç—Ç–∞–ø–∞–º)")

# === –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è ===
scenario_titles = [s["title"] for s in scenarios]
scenario_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:", scenario_titles)
scenario = next(s for s in scenarios if s["title"] == scenario_choice)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
if "structured_step" not in st.session_state:
    st.session_state.structured_step = 0
    st.session_state.structured_results = []
    st.session_state.structured_start = datetime.now().isoformat()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ ===
step = st.session_state.structured_step
if step < len(scenario["stages"]):
    stage = scenario["stages"][step]
    st.subheader(f"üß≠ –≠—Ç–∞–ø: {stage['name']}")
    st.markdown(f"**üë®‚Äç‚öïÔ∏è –í—Ä–∞—á:** _{stage['doctor_says']}_")

    options = stage["options"]
    labels = [f"{opt['text']}" for opt in options]
    choice = st.radio("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", labels, key=f"stage_{step}")

    if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å", key=f"submit_{step}"):
        selected_option = next(opt for opt in options if opt["text"] == choice)
        st.session_state.structured_results.append({
            "stage": stage["name"],
            "choice": selected_option["text"],
            "label": selected_option["label"]
        })
        st.session_state.structured_step += 1
        st.rerun()
else:
    st.success("‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")

    results = st.session_state.structured_results
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:")
    for r in results:
        emoji = {"–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π": "‚úÖ", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π": "‚ö†Ô∏è", "–æ—à–∏–±–æ—á–Ω—ã–π": "‚ùå"}[r["label"]]
        st.markdown(f"- **{r['stage']}**: {emoji} {r['choice']}")

    correct = sum(1 for r in results if r["label"] == "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
    total = len(results)
    score = round(correct / total * 100)
    st.markdown(f"**–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {correct} –∏–∑ {total} ({score}%)**")

    if st.button("üîÅ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"):
        for key in ["structured_step", "structured_results", "structured_start"]:
            del st.session_state[key]
        st.rerun()
