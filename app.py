
import streamlit as st
import json
import random
import os
from datetime import datetime
from pathlib import Path

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ===
with open("scenarios.json", "r", encoding="utf-8") as f:
    scenarios = json.load(f)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(page_title="MP-Agent", page_icon="üíä")
st.title("üß™ –¢—Ä–µ–Ω–∞–∂—ë—Ä –æ–±—â–µ–Ω–∏—è: –ú–µ–¥–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –∏ –í—Ä–∞—á")

# === –í—ã–±–æ—Ä —Ä–æ–ª–∏ –∏ –∏–º–µ–Ω–∏ ===
if "role" not in st.session_state:
    st.session_state.role = None
if "user_name" not in st.session_state:
    st.session_state.user_name = ""

if st.session_state.role is None:
    role = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", ["–ú–µ–¥–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å", "–í—Ä–∞—á", "–¢—Ä–µ–Ω–µ—Ä"])
    name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
        if name.strip() == "":
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.")
        else:
            st.session_state.role = role
            st.session_state.user_name = name.strip()
            st.rerun()
    st.stop()

st.info(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ **{st.session_state.role}** ‚Äî {st.session_state.user_name}")

# === –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ —Å—Ç–∏–ª—è –≤—Ä–∞—á–∞ ===
scenario_titles = [s["title"] for s in scenarios]
col1, col2 = st.columns(2)
with col1:
    scenario_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π", ["–°–ª—É—á–∞–π–Ω—ã–π"] + scenario_titles)
with col2:
    style_choice = st.radio("–°—Ç–∏–ª—å –≤—Ä–∞—á–∞", ["–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π", "–°–∫–µ–ø—Ç–∏–∫"])

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ===
scenario = random.choice(scenarios) if scenario_choice == "–°–ª—É—á–∞–π–Ω—ã–π" else next(s for s in scenarios if s["title"] == scenario_choice)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
if "step" not in st.session_state:
    st.session_state.step = 0
    st.session_state.history = []
    st.session_state.log = {
        "scenario_id": scenario["id"],
        "scenario_title": scenario["title"],
        "style": style_choice,
        "role": st.session_state.role,
        "user_name": st.session_state.user_name,
        "dialog": [],
        "timestamp": datetime.now().isoformat()
    }

# === –î–∏–∞–ª–æ–≥ ===
st.subheader("üí¨ –î–∏–∞–ª–æ–≥")
for entry in st.session_state.history:
    with st.chat_message(entry["role"]):
        st.markdown(entry["text"])

if st.session_state.step < len(scenario["steps"]):
    step = scenario["steps"][st.session_state.step]
    style = scenario["style_variants"][style_choice]
    doctor_text = f"{style['prefix']}{step['text']}{style['suffix']}"

    with st.chat_message("–í—Ä–∞—á"):
        st.markdown(doctor_text)
    st.session_state.history.append({"role": "–í—Ä–∞—á", "text": doctor_text})
    st.session_state.log["dialog"].append({"role": "–í—Ä–∞—á", "text": doctor_text})

    user_input = st.chat_input("–í–∞—à –æ—Ç–≤–µ—Ç:")
    if user_input:
        st.session_state.history.append({"role": "–ú–ü", "text": user_input})
        st.session_state.log["dialog"].append({"role": "–ú–ü", "text": user_input})
        st.session_state.step += 1
        st.rerun()
else:
    st.success("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ")

    # === –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å –ª–æ–≥ ===
    log_json = json.dumps(st.session_state.log, ensure_ascii=False, indent=2)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON", log_json, "session_log.json", "application/json")

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
    stats_dir = Path("data")
    stats_dir.mkdir(exist_ok=True)
    stats_file = stats_dir / "stats.json"

    stats = []
    if stats_file.exists():
        with open(stats_file, "r", encoding="utf-8") as f:
            stats = json.load(f)
    stats.append(st.session_state.log)
    with open(stats_file, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

    # === –ê–≤—Ç–æ–≤—ã—Ö–æ–¥ ===
    if st.button("üîÅ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()

    # === –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ ===
    if st.session_state.role == "–¢—Ä–µ–Ω–µ—Ä":
        with st.expander("üìä –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞"):
            st.markdown("""
**1. –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è:** 4/5  
–•–æ—Ä–æ—à–æ —Ä–∞—Å–∫—Ä—ã—Ç—ã –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, –Ω–æ –Ω–µ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.

**2. –ö–æ–Ω—Ç–∞–∫—Ç —Å –≤—Ä–∞—á–æ–º:** 5/5  
–î–∏–∞–ª–æ–≥ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π, –∑–∞–¥–∞–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.

**3. –õ–æ–≥–∏–∫–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:** 4/5  
–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∞, –Ω–æ –Ω–µ –±—ã–ª–æ —Ä–µ–∑—é–º–∏—Ä—É—é—â–µ–≥–æ –≤—ã–≤–æ–¥–∞.

**üí¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**  
–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Ç–∏–ø–∞: _–ú–æ–≥—É –ª–∏ —è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ü—Ä–æ—Å–ø–µ–∫—Ç—É –¥–ª—è —Ç–∞–∫–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤?_

**‚≠ê –ò—Ç–æ–≥:** 4.3 / 5
            """)

        # === –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–º ===
        with st.expander("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π"):
            st.markdown(f"**–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:** {len(stats)}")
            avg_len = round(sum(len(s['dialog']) for s in stats) / len(stats), 2)
            st.markdown(f"**–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –¥–∏–∞–ª–æ–≥–∞:** {avg_len} —Ä–µ–ø–ª–∏–∫")

            from collections import Counter
            role_counts = Counter(s["role"] for s in stats)
            for role, count in role_counts.items():
                st.markdown(f"- **{role}**: {count}")
