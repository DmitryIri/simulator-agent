
import streamlit as st
import json
from datetime import datetime
import os

st.set_page_config(page_title="AI –¢—Ä–µ–Ω–∞–∂—ë—Ä –¥–ª—è –º–µ–¥–ø—Ä–µ–¥–æ–≤", layout="wide")

@st.cache_data
def load_scenarios(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)["scenarios"]

def find_scenario(scenarios, objection, style):
    for item in scenarios:
        if item["objection"] == objection and item["style"] == style:
            return item
    return None

def save_log(entry, path="logs.json"):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

scenarios = load_scenarios("scenarios_multistep_20_final.json")

st.title("üß† AI –¢—Ä–µ–Ω–∞–∂—ë—Ä –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π")

role = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å", ["–ú–µ–¥–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å", "–¢—Ä–µ–Ω–µ—Ä"], horizontal=True)

if role == "–ú–µ–¥–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å":
    tab1, tab2 = st.tabs(["üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"])

    with tab1:
        user_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", value="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        objection_options = sorted(list(set(s["objection"] for s in scenarios)))
        style_options = ["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π", "—Å–∫–µ–ø—Ç–∏–∫", "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π"]

        selected_objection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ", objection_options)
        selected_style = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≤—Ä–∞—á–∞", style_options)

        scenario = find_scenario(scenarios, selected_objection, selected_style)

        if scenario:
            if (
                "step" not in st.session_state
                or st.session_state.get("last_selection") != (selected_objection, selected_style, user_name)
            ):
                st.session_state.step = 0
                st.session_state.last_selection = (selected_objection, selected_style, user_name)
                st.session_state.session_log = []
                st.session_state.answer_submitted = False
                st.session_state.go_next = False

            steps = scenario["steps"]
            current_step = st.session_state.step

            if current_step < len(steps):
                step_data = steps[current_step]
                st.subheader(f"üë®‚Äç‚öïÔ∏è –†–µ–ø–ª–∏–∫–∞ –≤—Ä–∞—á–∞ (—à–∞–≥ {current_step + 1}/{len(steps)}):")
                st.markdown(f"> {step_data['doctor']}")

                if not st.session_state.answer_submitted:
                    with st.form(key=f"form_step_{current_step}"):
                        selected_text = st.radio(
                            "üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
                            [a["text"] for a in step_data["answers"]],
                            key=f"radio_{current_step}"
                        )
                        submitted = st.form_submit_button("–û—Ç–≤–µ—Ç–∏—Ç—å")

                    if submitted:
                        selected = next((a for a in step_data["answers"] if a["text"] == selected_text), None)
                        if selected:
                            st.session_state.answer_submitted = True
                            st.session_state.last_feedback = {
                                "text": selected["text"],
                                "type": selected["type"],
                                "feedback": selected["feedback"],
                                "doctor": step_data["doctor"]
                            }
                            st.session_state.session_log.append({
                                "doctor": step_data["doctor"],
                                "answer": selected["text"],
                                "type": selected["type"]
                            })
                            st.rerun()

                elif st.session_state.answer_submitted and not st.session_state.go_next:
                    feedback = st.session_state.last_feedback
                    st.markdown(f"**–¢–∏–ø –æ—Ç–≤–µ—Ç–∞:** {feedback['type']}")
                    st.info(feedback["feedback"])
                    if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                        st.session_state.go_next = True
                        st.rerun()

                elif st.session_state.go_next:
                    st.session_state.step += 1
                    st.session_state.answer_submitted = False
                    st.session_state.go_next = False
                    st.rerun()
            else:
                st.success("üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ 3 —à–∞–≥–æ–≤!")

                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"):
                    save_log({
                        "user": user_name,
                        "timestamp": datetime.now().isoformat(),
                        "objection": selected_objection,
                        "style": selected_style,
                        "steps": st.session_state.session_log
                    })
                    st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

                if st.button("üîÅ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"):
                    st.session_state.step = 0
                    st.session_state.session_log = []
                    st.session_state.answer_submitted = False
                    st.session_state.go_next = False
        else:
            st.warning("–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    with tab2:
        log_path = "logs.json"
        st.header("üìä –õ–æ–≥–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")

        if os.path.exists(log_path):
            with open(log_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            if data:
                user_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", ["–í—Å–µ"] + list({entry["user"] for entry in data}))
                filtered = data if user_filter == "–í—Å–µ" else [d for d in data if d["user"] == user_filter]

                st.write(f"üî¢ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(filtered)}")

                for entry in filtered[::-1]:
                    with st.expander(f"üë§ {entry['user']} ‚Äî {entry['objection']} / {entry['style']} ‚Äî {entry['timestamp']}"):
                        for i, step in enumerate(entry["steps"], 1):
                            st.markdown(f"**–®–∞–≥ {i}**")
                            st.markdown(f"> üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {step['doctor']}")
                            st.markdown(f"‚û°Ô∏è –û—Ç–≤–µ—Ç: *{step['answer']}*")
                            st.markdown(f"üü° –¢–∏–ø: **{step['type']}**")
                            st.markdown("---")
            else:
                st.info("–õ–æ–≥ –ø—É—Å—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π.")
        else:
            st.info("–§–∞–π–ª logs.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")

else:
    st.info("üîí –†–µ–∂–∏–º —Ç—Ä–µ–Ω–µ—Ä–∞ –∞–∫—Ç–∏–≤–µ–Ω. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ (–≤ –±—É–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏).")
